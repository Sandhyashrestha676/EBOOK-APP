<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{"currentConversationId":"e043be6a-7402-4584-beaa-eac70299bfb6","conversations":{"1f833fb1-d203-43cf-94c2-d8f1169be6ac":{"id":"1f833fb1-d203-43cf-94c2-d8f1169be6ac","createdAtIso":"2025-05-06T04:03:59.046Z","lastInteractedAtIso":"2025-05-06T04:03:59.046Z","chatHistory":[],"feedbackStates":{},"toolUseStates":{},"draftExchange":{"request_message":"give me database schema ","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"give me database schema "}]}]},"mentioned_items":[],"status":"draft"},"draftActiveContextIds":["/Users/sandhyashrestha/eclipse-workspace/ebook-app 5/src/main/java/dao/BookDAO.java","/Users/sandhyashrestha/eclipse-workspace/ebook-app 5falsefalse"],"requestIds":[],"isPinned":false,"isShareable":false,"extraData":{"hasDirtyEdits":false},"personaType":0},"e043be6a-7402-4584-beaa-eac70299bfb6":{"id":"e043be6a-7402-4584-beaa-eac70299bfb6","createdAtIso":"2025-05-06T04:04:08.937Z","lastInteractedAtIso":"2025-05-06T05:48:23.465Z","chatHistory":[{"request_id":"4edd9d53-4584-467d-b2bf-d6b268e3e25d","uuid":"974e8ee2-e25c-4e9d-b997-26af42137d4c","chatItemType":"agentic-checkpoint-delimiter","status":"success","fromTimestamp":0,"toTimestamp":1746504248938,"seen_state":"seen"},{"status":"success","request_id":"b597744a-fb78-446b-80f7-9fc9f61fe1d5","request_message":"give me database schema ","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"give me database schema "}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":1,"type":5,"content":"","tool_use":{"tool_use_id":"toolu_vrtx_01NV8ooqEkswZWFX124MTXPg","tool_name":"codebase-retrieval","input_json":"{\"information_request\": \"Find database schema information, SQL files, or database configuration files that define the tables and their relationships in the ebook-app project. Look for files like schema.sql, database.sql, or any files that contain CREATE TABLE statements.\"}"}},{"id":0,"type":0,"content":"I'll help you find the database schema for the ebook-app project. Let me search for relevant files that might contain the database schema information.\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"give me database schema "}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/sandhyashrestha/eclipse-workspace/ebook-app 5","folderRoot":"/Users/sandhyashrestha/eclipse-workspace/ebook-app 5"}],"workspaceFoldersUnchanged":false}}],"response_text":"I'll help you find the database schema for the ebook-app project. Let me search for relevant files that might contain the database schema information.\n","workspace_file_chunks":[]},{"status":"success","request_id":"c72498e8-bb04-4c34-a811-96adf7cbe211","request_message":"","structured_output_nodes":[{"id":0,"type":0,"content":"I found the database schema for the ebook-app project. Here's the database schema information:\n\n## Database Schema\n\nThe application uses a MySQL database named `ebookjava` with the following tables:\n\n### 1. users\n```sql\nCREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    full_name VARCHAR(100) NOT NULL,\n    role VARCHAR(20) NOT NULL DEFAULT 'user',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### 2. books\n```sql\nCREATE TABLE IF NOT EXISTS books (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    author VARCHAR(100) NOT NULL,\n    description TEXT,\n    category VARCHAR(50),\n    genre VARCHAR(50),\n    price DECIMAL(10, 2) NOT NULL,\n    image_url VARCHAR(255),\n    stock INT NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### 3. cart_items\n```sql\nCREATE TABLE IF NOT EXISTS cart_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    book_id INT NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);\n```\n\n### 4. orders\n```sql\nCREATE TABLE IF NOT EXISTS orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n```\n\n### 5. order_items\n```sql\nCREATE TABLE IF NOT EXISTS order_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    book_id INT NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);\n```\n\n### 6. payments\n```sql\nCREATE TABLE IF NOT EXISTS payments (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    card_number VARCHAR(255),\n    card_holder_name VARCHAR(100),\n    expiry_date VARCHAR(10),\n    cvv VARCHAR(10),\n    amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    transaction_id VARCHAR(100),\n    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n);\n```\n\nThe database connection parameters used in the application are:\n- JDBC URL: `jdbc:mysql://localhost:3306/ebookjava`\n- Username: `root`\n- Password: `oracle`\n\nIs there any specific aspect of the database schema you'd like me to explain in more detail?\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":1,"tool_result_node":{"content":"The following code sections were retrieved:\nPath: src/main/java/resources/database.sql\n-- Create database\nCREATE DATABASE IF NOT EXISTS ebookjava;\nUSE ebookstore;\n\n-- Create tables\nCREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    full_name VARCHAR(100) NOT NULL,\n    role VARCHAR(20) NOT NULL DEFAULT 'user',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS books (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    author VARCHAR(100) NOT NULL,\n    description TEXT,\n    category VARCHAR(50),\n    genre VARCHAR(50),\n    price DECIMAL(10, 2) NOT NULL,\n    image_url VARCHAR(255),\n    stock INT NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS cart_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    book_id INT NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    book_id INT NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);\n\n-- Insert sample data\n-- Admin user (password: admin123)\nINSERT INTO users (username, password, email, full_name, role) VALUES\n('admin', 'admin123', 'admin@ebookstore.com', 'Admin User', 'admin');\n\n-- Regular users (password: user123)\nINSERT INTO users (username, password, email, full_name, role) VALUES\n('john', 'user123', 'john@example.com', 'John Doe', 'user'),\n('jane', 'user123', 'jane@example.com', 'Jane Smith', 'user');\n\n-- Sample books\nINSERT INTO books (title, author, description, category, genre, price, image_url, stock) VALUES\n('The Great Gatsby', 'F. Scott Fitzgerald', 'A novel about the mysterious Jay Gatsby and his love for Daisy Buchanan.', 'Fiction', 'Classic', 9.99, 'https://example.com/images/gatsby.jpg', 100),\n('To Kill a Mockingbird', 'Harper Lee', 'A novel about racial inequality through the eyes of a young girl in Alabama.', 'Fiction', 'Classic', 8.99, 'https://example.com/images/mockingbird.jpg', 75),\n('1984', 'George Orwell', 'A dystopian novel set in a totalitarian society.', 'Fiction', 'Dystopian', 7.99, 'https://example.com/images/1984.jpg', 50),\n('The Hobbit', 'J.R.R. Tolkien', 'A fantasy novel about the adventures of Bilbo Baggins.', 'Fiction', 'Fantasy', 12.99, 'https://example.com/images/hobbit.jpg', 60),\n('A Brief History of Time', 'Stephen Hawking', 'A book about the nature of time and the universe.', 'Non-Fiction', 'Science', 14.99, 'https://example.com/images/time.jpg', 40),\n('Sapiens: A Brief History of Humankind', 'Yuval Noah Harari', 'A book about the history of human evolution.', 'Non-Fiction', 'History', 15.99, 'https://example.com/images/sapiens.jpg', 30),\n('Clean Code', 'Robert C. Martin', 'A handbook of agile software craftsmanship.', 'Technology', 'Programming', 29.99, 'https://example.com/images/cleancode.jpg', 25),\n('The Art of Computer Programming', 'Donald Knuth', 'A comprehensive monograph on computer programming.', 'Technology', 'Programming', 49.99, 'https://example.com/images/knuth.jpg', 15);\n...\nPath: src/main/java/resources/add_payment_table.sql\n-- Connect to the ebookjava database\nUSE ebookjava;\n\n-- Create payment table\nCREATE TABLE IF NOT EXISTS payments (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    card_number VARCHAR(255),\n    card_holder_name VARCHAR(100),\n    expiry_date VARCHAR(10),\n    cvv VARCHAR(10),\n    amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    transaction_id VARCHAR(100),\n    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n);\n\n-- Display the table structure\nDESCRIBE payments;\n...\nPath: src/main/java/resources/ensure_payments_table.sql\n-- Connect to the ebookjava database\nUSE ebookjava;\n\n-- Create payment table if it doesn't exist\nCREATE TABLE IF NOT EXISTS payments (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    card_number VARCHAR(255),\n    card_holder_name VARCHAR(100),\n    expiry_date VARCHAR(10),\n    cvv VARCHAR(10),\n    amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    transaction_id VARCHAR(100),\n    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n);\n\n-- Display the table structure\nDESCRIBE payments;\n...\nPath: admin_update.sql\n-- Connect to the ebookstore database\nUSE ebookstore;\n\n-- Update the admin user with the specified credentials\nUPDATE users SET \n    email = 'admin@gmail.com',\n    password = 'admin123'\nWHERE username = 'admin';\n\n-- Ensure all other users have the 'user' role\nUPDATE users SET \n    role = 'user'\nWHERE username != 'admin';\n\n-- Display all users to verify the changes\nSELECT id, username, email, role FROM users;\n...\nPath: src/main/java/dao/BookDAO.java\npackage dao;\n\nimport model.Book;\nimport java.sql.DriverManager;\n\nimport java.math.BigDecimal;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BookDAO {\n\n    static {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Database connection parameters\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/ebookjava\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"oracle\";\n...\n\n            while (rs.next()) {\n                Book book = new Book();\n                book.setId(rs.getInt(\"id\"));\n                book.setTitle(rs.getString(\"title\"));\n                book.setAuthor(rs.getString(\"author\"));\n                book.setDescription(rs.getString(\"description\"));\n                book.setCategory(rs.getString(\"category\"));\n                book.setGenre(rs.getString(\"genre\"));\n                book.setPrice(rs.getBigDecimal(\"price\"));\n                String imageUrl = rs.getString(\"image_url\");\n\n                // Convert example.com URLs to local image paths\n                if (imageUrl != null && imageUrl.contains(\"example.com\")) {\n                    String imageName = imageUrl.substring(imageUrl.lastIndexOf(\"/\") + 1);\n                    imageUrl = \"images/\" + imageName;\n                }\n\n                // Special handling for The Great Gatsby\n                if (book.getTitle().equals(\"The Great Gatsby\")) {\n                    imageUrl = \"images/gatsby.jpg\";\n                }\n...\n\n            while (rs.next()) {\n                Book book = new Book();\n                book.setId(rs.getInt(\"id\"));\n                book.setTitle(rs.getString(\"title\"));\n                book.setAuthor(rs.getString(\"author\"));\n                book.setDescription(rs.getString(\"description\"));\n                book.setCategory(rs.getString(\"category\"));\n                book.setGenre(rs.getString(\"genre\"));\n                book.setPrice(rs.getBigDecimal(\"price\"));\n                String imageUrl = rs.getString(\"image_url\");\n                System.out.println(\"Original image URL for \" + book.getTitle() + \": \" + imageUrl);\n                // Convert example.com URLs to local image paths\n                if (imageUrl != null && imageUrl.contains(\"example.com\")) {\n                    String imageName = imageUrl.substring(imageUrl.lastIndexOf(\"/\") + 1);\n                    imageUrl = \"images/\" + imageName;\n                    System.out.println(\"Converted to: \" + imageUrl);\n                }\n...\nPath: src/main/java/util/EnsurePaymentsTable.java\npackage util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * Utility class to ensure the payments table exists in the database.\n */\npublic class EnsurePaymentsTable {\n\n    // Database connection parameters\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/ebookjava\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"oracle\";\n\n    static {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        Connection conn = null;\n        Statement stmt = null;\n        ResultSet rs = null;\n\n        try {\n            // Direct database connection\n            conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);\n\n            // Check if the payments table already exists\n            rs = conn.getMetaData().getTables(null, null, \"payments\", null);\n            if (!rs.next()) {\n                // Table doesn't exist, create it\n                System.out.println(\"Creating payments table...\");\n                stmt = conn.createStatement();\n\n                String createTableSQL = \"CREATE TABLE payments (\" +\n                    \"id INT AUTO_INCREMENT PRIMARY KEY, \" +\n                    \"order_id INT NOT NULL, \" +\n                    \"payment_method VARCHAR(50) NOT NULL, \" +\n                    \"card_number VARCHAR(255), \" +\n                    \"card_holder_name VARCHAR(100), \" +\n                    \"expiry_date VARCHAR(10), \" +\n                    \"cvv VARCHAR(10), \" +\n                    \"amount DECIMAL(10, 2) NOT NULL, \" +\n                    \"status VARCHAR(20) NOT NULL DEFAULT 'pending', \" +\n                    \"transaction_id VARCHAR(100), \" +\n                    \"payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \" +\n                    \"FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\" +\n                \")\";\n\n                stmt.executeUpdate(createTableSQL);\n                System.out.println(\"Payments table created successfully.\");\n            } else {\n                System.out.println(\"Payments table already exists.\");\n            }\n\n            System.out.println(\"Done!\");\n...\nPath: src/main/java/resources/create_admin.sql\n-- Add admin user if it doesn't exist\nINSERT INTO users (username, password, email, full_name, role)\nSELECT 'admin', 'admin123', 'admin@gmail.com', 'Admin User', 'admin'\nFROM dual\nWHERE NOT EXISTS (\n    SELECT 1 FROM users WHERE username = 'admin'\n);\n\n-- Display users\nSELECT id, username, email, role FROM users;\n...\nPath: src/main/java/util/DatabaseUtil.java\npackage util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseUtil {\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/ebookjava\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"oracle\";\n    \n    static {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    public static Connection getConnection() throws SQLException {\n        return DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);\n    }\n    \n    public static void closeConnection(Connection connection) {\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n...\nPath: src/main/java/model/User.java\n...\n\npublic class User {\n    private int id;\n    private String username;\n    private String password;\n    private String email;\n    private String fullName;\n    private String role; // \"admin\" or \"user\"\n    private Date createdAt; // Registration date\n\n    public User() {\n    }\n\n    public User(int id, String username, String password, String email, String fullName, String role) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.email = email;\n        this.fullName = fullName;\n        this.role = role;\n        this.createdAt = new Date(); // Set to current date by default\n    }\n\n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n...\nPath: src/main/java/model/OrderItem.java\npackage model;\n\nimport java.math.BigDecimal;\n\npublic class OrderItem {\n    private int id;\n    private int orderId;\n    private int bookId;\n    private int quantity;\n    private BigDecimal price;\n    private Book book;\n    \n    public OrderItem() {\n    }\n    \n    public OrderItem(int id, int orderId, int bookId, int quantity, BigDecimal price) {\n        this.id = id;\n        this.orderId = orderId;\n        this.bookId = bookId;\n        this.quantity = quantity;\n        this.price = price;\n    }\n    \n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public int getOrderId() {\n        return orderId;\n    }\n    \n    public void setOrderId(int orderId) {\n        this.orderId = orderId;\n    }\n    \n    public int getBookId() {\n        return bookId;\n    }\n    \n    public void setBookId(int bookId) {\n        this.bookId = bookId;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n    \n    public BigDecimal getPrice() {\n        return price;\n    }\n    \n    public void setPrice(BigDecimal price) {\n        this.price = price;\n    }\n    \n    public Book getBook() {\n        return book;\n    }\n    \n    public void setBook(Book book) {\n        this.book = book;\n    }\n    \n    public BigDecimal getSubtotal() {\n        return price.multiply(new BigDecimal(quantity));\n    }\n}\n...\nPath: src/main/java/model/Book.java\n...\n\npublic class Book {\n    private int id;\n    private String title;\n    private String author;\n    private String description;\n    private String category;\n    private String genre;\n    private BigDecimal price;\n    private String imageUrl;\n    private int stock;\n    \n    public Book() {\n    }\n    \n    public Book(int id, String title, String author, String description, String category, \n                String genre, BigDecimal price, String imageUrl, int stock) {\n        this.id = id;\n        this.title = title;\n        this.author = author;\n        this.description = description;\n        this.category = category;\n        this.genre = genre;\n        this.price = price;\n        this.imageUrl = imageUrl;\n        this.stock = stock;\n    }\n    \n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n...\nPath: src/main/java/model/Order.java\npackage model;\n\nimport java.math.BigDecimal;\nimport java.util.Date;\nimport java.util.List;\n\npublic class Order {\n    private int id;\n    private int userId;\n    private Date orderDate;\n    private BigDecimal totalAmount;\n    private String status; // \"pending\", \"processing\", \"shipped\", \"delivered\", \"cancelled\"\n    private List<OrderItem> orderItems;\n    \n    public Order() {\n    }\n    \n    public Order(int id, int userId, Date orderDate, BigDecimal totalAmount, String status) {\n        this.id = id;\n        this.userId = userId;\n        this.orderDate = orderDate;\n        this.totalAmount = totalAmount;\n        this.status = status;\n    }\n    \n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public int getUserId() {\n        return userId;\n    }\n    \n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n    \n    public Date getOrderDate() {\n        return orderDate;\n    }\n...\nPath: src/main/java/dao/UserDAO.java\npackage dao;\n\nimport model.User;\nimport java.sql.DriverManager;\nimport util.PasswordUtil;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UserDAO {\n\n    static {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Database connection parameters\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/ebookjava\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"oracle\";\n...\nPath: src/main/java/model/CartItem.java\n...\n\npublic class CartItem {\n    private int id;\n    private int userId;\n    private int bookId;\n    private int quantity;\n    private Book book;\n    \n    public CartItem() {\n    }\n    \n    public CartItem(int id, int userId, int bookId, int quantity) {\n        this.id = id;\n        this.userId = userId;\n        this.bookId = bookId;\n        this.quantity = quantity;\n    }\n    \n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public int getUserId() {\n        return userId;\n    }\n    \n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n    \n    public int getBookId() {\n        return bookId;\n    }\n    \n    public void setBookId(int bookId) {\n        this.bookId = bookId;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n    \n    public Book getBook() {\n        return book;\n    }\n...\nPath: src/main/java/model/Payment.java\n...\n\npublic class Payment {\n    private int id;\n    private int orderId;\n    private String paymentMethod;\n    private String cardNumber;\n    private String cardHolderName;\n    private String expiryDate;\n    private String cvv;\n    private BigDecimal amount;\n    private String status;\n    private String transactionId;\n    private Date paymentDate;\n    \n    // Constructors\n    public Payment() {\n    }\n    \n    // Getters and setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public int getOrderId() {\n        return orderId;\n    }\n    \n    public void setOrderId(int orderId) {\n        this.orderId = orderId;\n    }\n    \n    public String getPaymentMethod() {\n        return paymentMethod;\n    }\n    \n    public void setPaymentMethod(String paymentMethod) {\n        this.paymentMethod = paymentMethod;\n    }\n    \n    public String getCardNumber() {\n        return cardNumber;\n    }\n...\nPath: src/main/java/util/CreateAdminUser.java\npackage util;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class CreateAdminUser {\n    public static void main(String[] args) {\n        Connection conn = null;\n        PreparedStatement checkStmt = null;\n        PreparedStatement insertStmt = null;\n        ResultSet rs = null;\n\n        try {\n            conn = DatabaseUtil.getConnection();\n\n            // Check if admin user already exists\n            String checkSql = \"SELECT COUNT(*) FROM users WHERE username...","is_error":false,"request_id":"","tool_use_id":"toolu_vrtx_01NV8ooqEkswZWFX124MTXPg"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/sandhyashrestha/eclipse-workspace/ebook-app 5","folderRoot":"/Users/sandhyashrestha/eclipse-workspace/ebook-app 5"}],"workspaceFoldersUnchanged":false}}],"response_text":"I found the database schema for the ebook-app project. Here's the database schema information:\n\n## Database Schema\n\nThe application uses a MySQL database named `ebookjava` with the following tables:\n\n### 1. users\n```sql\nCREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    full_name VARCHAR(100) NOT NULL,\n    role VARCHAR(20) NOT NULL DEFAULT 'user',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### 2. books\n```sql\nCREATE TABLE IF NOT EXISTS books (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    author VARCHAR(100) NOT NULL,\n    description TEXT,\n    category VARCHAR(50),\n    genre VARCHAR(50),\n    price DECIMAL(10, 2) NOT NULL,\n    image_url VARCHAR(255),\n    stock INT NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### 3. cart_items\n```sql\nCREATE TABLE IF NOT EXISTS cart_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    book_id INT NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);\n```\n\n### 4. orders\n```sql\nCREATE TABLE IF NOT EXISTS orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n```\n\n### 5. order_items\n```sql\nCREATE TABLE IF NOT EXISTS order_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    book_id INT NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);\n```\n\n### 6. payments\n```sql\nCREATE TABLE IF NOT EXISTS payments (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    card_number VARCHAR(255),\n    card_holder_name VARCHAR(100),\n    expiry_date VARCHAR(10),\n    cvv VARCHAR(10),\n    amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    transaction_id VARCHAR(100),\n    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n);\n```\n\nThe database connection parameters used in the application are:\n- JDBC URL: `jdbc:mysql://localhost:3306/ebookjava`\n- Username: `root`\n- Password: `oracle`\n\nIs there any specific aspect of the database schema you'd like me to explain in more detail?\n","workspace_file_chunks":[]},{"request_id":"d8f2d170-d23b-46b8-b7cd-d2ca28f58278","status":"cancelled","chatItemType":"agentic-turn-delimiter"},{"status":"success","request_id":"9a5ffa29-1b7d-418f-971e-8990e6ba75d2","request_message":"in text","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph","content":[{"type":"text","text":"in text"}]}]},"mentioned_items":[],"structured_output_nodes":[{"id":0,"type":0,"content":"# Database Schema for eBook App\n\n## Database Name: ebookjava\n\n## Tables:\n\n1. **users**\n   - id: INT (Primary Key, Auto Increment)\n   - username: VARCHAR(50) (Not Null, Unique)\n   - password: VARCHAR(255) (Not Null)\n   - email: VARCHAR(100) (Not Null)\n   - full_name: VARCHAR(100) (Not Null)\n   - role: VARCHAR(20) (Not Null, Default 'user')\n   - created_at: TIMESTAMP (Default Current Timestamp)\n\n2. **books**\n   - id: INT (Primary Key, Auto Increment)\n   - title: VARCHAR(255) (Not Null)\n   - author: VARCHAR(100) (Not Null)\n   - description: TEXT\n   - category: VARCHAR(50)\n   - genre: VARCHAR(50)\n   - price: DECIMAL(10,2) (Not Null)\n   - image_url: VARCHAR(255)\n   - stock: INT (Not Null, Default 0)\n   - created_at: TIMESTAMP (Default Current Timestamp)\n\n3. **cart_items**\n   - id: INT (Primary Key, Auto Increment)\n   - user_id: INT (Not Null, Foreign Key to users.id)\n   - book_id: INT (Not Null, Foreign Key to books.id)\n   - quantity: INT (Not Null, Default 1)\n   - created_at: TIMESTAMP (Default Current Timestamp)\n\n4. **orders**\n   - id: INT (Primary Key, Auto Increment)\n   - user_id: INT (Not Null, Foreign Key to users.id)\n   - order_date: TIMESTAMP (Default Current Timestamp)\n   - total_amount: DECIMAL(10,2) (Not Null)\n   - status: VARCHAR(20) (Not Null, Default 'pending')\n\n5. **order_items**\n   - id: INT (Primary Key, Auto Increment)\n   - order_id: INT (Not Null, Foreign Key to orders.id)\n   - book_id: INT (Not Null, Foreign Key to books.id)\n   - quantity: INT (Not Null)\n   - price: DECIMAL(10,2) (Not Null)\n\n6. **payments**\n   - id: INT (Primary Key, Auto Increment)\n   - order_id: INT (Not Null, Foreign Key to orders.id)\n   - payment_method: VARCHAR(50) (Not Null)\n   - card_number: VARCHAR(255)\n   - card_holder_name: VARCHAR(100)\n   - expiry_date: VARCHAR(10)\n   - cvv: VARCHAR(10)\n   - amount: DECIMAL(10,2) (Not Null)\n   - status: VARCHAR(20) (Not Null, Default 'pending')\n   - transaction_id: VARCHAR(100)\n   - payment_date: TIMESTAMP (Default Current Timestamp)\n\n## Relationships:\n- cart_items.user_id → users.id (CASCADE on delete)\n- cart_items.book_id → books.id (CASCADE on delete)\n- orders.user_id → users.id (CASCADE on delete)\n- order_items.order_id → orders.id (CASCADE on delete)\n- order_items.book_id → books.id (CASCADE on delete)\n- payments.order_id → orders.id (CASCADE on delete)\n\n## Database Connection:\n- JDBC URL: jdbc:mysql://localhost:3306/ebookjava\n- Username: root\n- Password: oracle\n"},{"id":2,"type":2,"content":""},{"id":3,"type":3,"content":""}],"seen_state":"seen","structured_request_nodes":[{"id":1,"type":0,"text_node":{"content":"in text"}},{"id":2,"type":4,"ide_state_node":{"workspaceFolders":[{"repositoryRoot":"/Users/sandhyashrestha/eclipse-workspace/ebook-app 5","folderRoot":"/Users/sandhyashrestha/eclipse-workspace/ebook-app 5"}],"workspaceFoldersUnchanged":false}}],"response_text":"# Database Schema for eBook App\n\n## Database Name: ebookjava\n\n## Tables:\n\n1. **users**\n   - id: INT (Primary Key, Auto Increment)\n   - username: VARCHAR(50) (Not Null, Unique)\n   - password: VARCHAR(255) (Not Null)\n   - email: VARCHAR(100) (Not Null)\n   - full_name: VARCHAR(100) (Not Null)\n   - role: VARCHAR(20) (Not Null, Default 'user')\n   - created_at: TIMESTAMP (Default Current Timestamp)\n\n2. **books**\n   - id: INT (Primary Key, Auto Increment)\n   - title: VARCHAR(255) (Not Null)\n   - author: VARCHAR(100) (Not Null)\n   - description: TEXT\n   - category: VARCHAR(50)\n   - genre: VARCHAR(50)\n   - price: DECIMAL(10,2) (Not Null)\n   - image_url: VARCHAR(255)\n   - stock: INT (Not Null, Default 0)\n   - created_at: TIMESTAMP (Default Current Timestamp)\n\n3. **cart_items**\n   - id: INT (Primary Key, Auto Increment)\n   - user_id: INT (Not Null, Foreign Key to users.id)\n   - book_id: INT (Not Null, Foreign Key to books.id)\n   - quantity: INT (Not Null, Default 1)\n   - created_at: TIMESTAMP (Default Current Timestamp)\n\n4. **orders**\n   - id: INT (Primary Key, Auto Increment)\n   - user_id: INT (Not Null, Foreign Key to users.id)\n   - order_date: TIMESTAMP (Default Current Timestamp)\n   - total_amount: DECIMAL(10,2) (Not Null)\n   - status: VARCHAR(20) (Not Null, Default 'pending')\n\n5. **order_items**\n   - id: INT (Primary Key, Auto Increment)\n   - order_id: INT (Not Null, Foreign Key to orders.id)\n   - book_id: INT (Not Null, Foreign Key to books.id)\n   - quantity: INT (Not Null)\n   - price: DECIMAL(10,2) (Not Null)\n\n6. **payments**\n   - id: INT (Primary Key, Auto Increment)\n   - order_id: INT (Not Null, Foreign Key to orders.id)\n   - payment_method: VARCHAR(50) (Not Null)\n   - card_number: VARCHAR(255)\n   - card_holder_name: VARCHAR(100)\n   - expiry_date: VARCHAR(10)\n   - cvv: VARCHAR(10)\n   - amount: DECIMAL(10,2) (Not Null)\n   - status: VARCHAR(20) (Not Null, Default 'pending')\n   - transaction_id: VARCHAR(100)\n   - payment_date: TIMESTAMP (Default Current Timestamp)\n\n## Relationships:\n- cart_items.user_id → users.id (CASCADE on delete)\n- cart_items.book_id → books.id (CASCADE on delete)\n- orders.user_id → users.id (CASCADE on delete)\n- order_items.order_id → orders.id (CASCADE on delete)\n- order_items.book_id → books.id (CASCADE on delete)\n- payments.order_id → orders.id (CASCADE on delete)\n\n## Database Connection:\n- JDBC URL: jdbc:mysql://localhost:3306/ebookjava\n- Username: root\n- Password: oracle\n","workspace_file_chunks":[]}],"feedbackStates":{"temp-fe-797f676b-1745-40f9-9243-f0babc9d68c2":{"selectedRating":0,"feedbackNote":""},"temp-fe-77909d67-7465-4bc1-8f56-49fb907381e5":{"selectedRating":0,"feedbackNote":""},"temp-fe-9fd6a6fa-ed80-46ae-8b5e-6648d06a9f6b":{"selectedRating":0,"feedbackNote":""}},"toolUseStates":{"b597744a-fb78-446b-80f7-9fc9f61fe1d5;toolu_vrtx_01NV8ooqEkswZWFX124MTXPg":{"phase":5,"result":{"text":"The following code sections were retrieved:\nPath: src/main/java/resources/database.sql\n-- Create database\nCREATE DATABASE IF NOT EXISTS ebookjava;\nUSE ebookstore;\n\n-- Create tables\nCREATE TABLE IF NOT EXISTS users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(50) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL,\n    email VARCHAR(100) NOT NULL,\n    full_name VARCHAR(100) NOT NULL,\n    role VARCHAR(20) NOT NULL DEFAULT 'user',\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS books (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    author VARCHAR(100) NOT NULL,\n    description TEXT,\n    category VARCHAR(50),\n    genre VARCHAR(50),\n    price DECIMAL(10, 2) NOT NULL,\n    image_url VARCHAR(255),\n    stock INT NOT NULL DEFAULT 0,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n\nCREATE TABLE IF NOT EXISTS cart_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    book_id INT NOT NULL,\n    quantity INT NOT NULL DEFAULT 1,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,\n    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS orders (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    user_id INT NOT NULL,\n    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE\n);\n\nCREATE TABLE IF NOT EXISTS order_items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    book_id INT NOT NULL,\n    quantity INT NOT NULL,\n    price DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE,\n    FOREIGN KEY (book_id) REFERENCES books(id) ON DELETE CASCADE\n);\n\n-- Insert sample data\n-- Admin user (password: admin123)\nINSERT INTO users (username, password, email, full_name, role) VALUES\n('admin', 'admin123', 'admin@ebookstore.com', 'Admin User', 'admin');\n\n-- Regular users (password: user123)\nINSERT INTO users (username, password, email, full_name, role) VALUES\n('john', 'user123', 'john@example.com', 'John Doe', 'user'),\n('jane', 'user123', 'jane@example.com', 'Jane Smith', 'user');\n\n-- Sample books\nINSERT INTO books (title, author, description, category, genre, price, image_url, stock) VALUES\n('The Great Gatsby', 'F. Scott Fitzgerald', 'A novel about the mysterious Jay Gatsby and his love for Daisy Buchanan.', 'Fiction', 'Classic', 9.99, 'https://example.com/images/gatsby.jpg', 100),\n('To Kill a Mockingbird', 'Harper Lee', 'A novel about racial inequality through the eyes of a young girl in Alabama.', 'Fiction', 'Classic', 8.99, 'https://example.com/images/mockingbird.jpg', 75),\n('1984', 'George Orwell', 'A dystopian novel set in a totalitarian society.', 'Fiction', 'Dystopian', 7.99, 'https://example.com/images/1984.jpg', 50),\n('The Hobbit', 'J.R.R. Tolkien', 'A fantasy novel about the adventures of Bilbo Baggins.', 'Fiction', 'Fantasy', 12.99, 'https://example.com/images/hobbit.jpg', 60),\n('A Brief History of Time', 'Stephen Hawking', 'A book about the nature of time and the universe.', 'Non-Fiction', 'Science', 14.99, 'https://example.com/images/time.jpg', 40),\n('Sapiens: A Brief History of Humankind', 'Yuval Noah Harari', 'A book about the history of human evolution.', 'Non-Fiction', 'History', 15.99, 'https://example.com/images/sapiens.jpg', 30),\n('Clean Code', 'Robert C. Martin', 'A handbook of agile software craftsmanship.', 'Technology', 'Programming', 29.99, 'https://example.com/images/cleancode.jpg', 25),\n('The Art of Computer Programming', 'Donald Knuth', 'A comprehensive monograph on computer programming.', 'Technology', 'Programming', 49.99, 'https://example.com/images/knuth.jpg', 15);\n...\nPath: src/main/java/resources/add_payment_table.sql\n-- Connect to the ebookjava database\nUSE ebookjava;\n\n-- Create payment table\nCREATE TABLE IF NOT EXISTS payments (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    card_number VARCHAR(255),\n    card_holder_name VARCHAR(100),\n    expiry_date VARCHAR(10),\n    cvv VARCHAR(10),\n    amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    transaction_id VARCHAR(100),\n    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n);\n\n-- Display the table structure\nDESCRIBE payments;\n...\nPath: src/main/java/resources/ensure_payments_table.sql\n-- Connect to the ebookjava database\nUSE ebookjava;\n\n-- Create payment table if it doesn't exist\nCREATE TABLE IF NOT EXISTS payments (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT NOT NULL,\n    payment_method VARCHAR(50) NOT NULL,\n    card_number VARCHAR(255),\n    card_holder_name VARCHAR(100),\n    expiry_date VARCHAR(10),\n    cvv VARCHAR(10),\n    amount DECIMAL(10, 2) NOT NULL,\n    status VARCHAR(20) NOT NULL DEFAULT 'pending',\n    transaction_id VARCHAR(100),\n    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\n);\n\n-- Display the table structure\nDESCRIBE payments;\n...\nPath: admin_update.sql\n-- Connect to the ebookstore database\nUSE ebookstore;\n\n-- Update the admin user with the specified credentials\nUPDATE users SET \n    email = 'admin@gmail.com',\n    password = 'admin123'\nWHERE username = 'admin';\n\n-- Ensure all other users have the 'user' role\nUPDATE users SET \n    role = 'user'\nWHERE username != 'admin';\n\n-- Display all users to verify the changes\nSELECT id, username, email, role FROM users;\n...\nPath: src/main/java/dao/BookDAO.java\npackage dao;\n\nimport model.Book;\nimport java.sql.DriverManager;\n\nimport java.math.BigDecimal;\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class BookDAO {\n\n    static {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Database connection parameters\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/ebookjava\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"oracle\";\n...\n\n            while (rs.next()) {\n                Book book = new Book();\n                book.setId(rs.getInt(\"id\"));\n                book.setTitle(rs.getString(\"title\"));\n                book.setAuthor(rs.getString(\"author\"));\n                book.setDescription(rs.getString(\"description\"));\n                book.setCategory(rs.getString(\"category\"));\n                book.setGenre(rs.getString(\"genre\"));\n                book.setPrice(rs.getBigDecimal(\"price\"));\n                String imageUrl = rs.getString(\"image_url\");\n\n                // Convert example.com URLs to local image paths\n                if (imageUrl != null && imageUrl.contains(\"example.com\")) {\n                    String imageName = imageUrl.substring(imageUrl.lastIndexOf(\"/\") + 1);\n                    imageUrl = \"images/\" + imageName;\n                }\n\n                // Special handling for The Great Gatsby\n                if (book.getTitle().equals(\"The Great Gatsby\")) {\n                    imageUrl = \"images/gatsby.jpg\";\n                }\n...\n\n            while (rs.next()) {\n                Book book = new Book();\n                book.setId(rs.getInt(\"id\"));\n                book.setTitle(rs.getString(\"title\"));\n                book.setAuthor(rs.getString(\"author\"));\n                book.setDescription(rs.getString(\"description\"));\n                book.setCategory(rs.getString(\"category\"));\n                book.setGenre(rs.getString(\"genre\"));\n                book.setPrice(rs.getBigDecimal(\"price\"));\n                String imageUrl = rs.getString(\"image_url\");\n                System.out.println(\"Original image URL for \" + book.getTitle() + \": \" + imageUrl);\n                // Convert example.com URLs to local image paths\n                if (imageUrl != null && imageUrl.contains(\"example.com\")) {\n                    String imageName = imageUrl.substring(imageUrl.lastIndexOf(\"/\") + 1);\n                    imageUrl = \"images/\" + imageName;\n                    System.out.println(\"Converted to: \" + imageUrl);\n                }\n...\nPath: src/main/java/util/EnsurePaymentsTable.java\npackage util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n/**\n * Utility class to ensure the payments table exists in the database.\n */\npublic class EnsurePaymentsTable {\n\n    // Database connection parameters\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/ebookjava\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"oracle\";\n\n    static {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        Connection conn = null;\n        Statement stmt = null;\n        ResultSet rs = null;\n\n        try {\n            // Direct database connection\n            conn = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);\n\n            // Check if the payments table already exists\n            rs = conn.getMetaData().getTables(null, null, \"payments\", null);\n            if (!rs.next()) {\n                // Table doesn't exist, create it\n                System.out.println(\"Creating payments table...\");\n                stmt = conn.createStatement();\n\n                String createTableSQL = \"CREATE TABLE payments (\" +\n                    \"id INT AUTO_INCREMENT PRIMARY KEY, \" +\n                    \"order_id INT NOT NULL, \" +\n                    \"payment_method VARCHAR(50) NOT NULL, \" +\n                    \"card_number VARCHAR(255), \" +\n                    \"card_holder_name VARCHAR(100), \" +\n                    \"expiry_date VARCHAR(10), \" +\n                    \"cvv VARCHAR(10), \" +\n                    \"amount DECIMAL(10, 2) NOT NULL, \" +\n                    \"status VARCHAR(20) NOT NULL DEFAULT 'pending', \" +\n                    \"transaction_id VARCHAR(100), \" +\n                    \"payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, \" +\n                    \"FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE CASCADE\" +\n                \")\";\n\n                stmt.executeUpdate(createTableSQL);\n                System.out.println(\"Payments table created successfully.\");\n            } else {\n                System.out.println(\"Payments table already exists.\");\n            }\n\n            System.out.println(\"Done!\");\n...\nPath: src/main/java/resources/create_admin.sql\n-- Add admin user if it doesn't exist\nINSERT INTO users (username, password, email, full_name, role)\nSELECT 'admin', 'admin123', 'admin@gmail.com', 'Admin User', 'admin'\nFROM dual\nWHERE NOT EXISTS (\n    SELECT 1 FROM users WHERE username = 'admin'\n);\n\n-- Display users\nSELECT id, username, email, role FROM users;\n...\nPath: src/main/java/util/DatabaseUtil.java\npackage util;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseUtil {\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/ebookjava\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"oracle\";\n    \n    static {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    public static Connection getConnection() throws SQLException {\n        return DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);\n    }\n    \n    public static void closeConnection(Connection connection) {\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n...\nPath: src/main/java/model/User.java\n...\n\npublic class User {\n    private int id;\n    private String username;\n    private String password;\n    private String email;\n    private String fullName;\n    private String role; // \"admin\" or \"user\"\n    private Date createdAt; // Registration date\n\n    public User() {\n    }\n\n    public User(int id, String username, String password, String email, String fullName, String role) {\n        this.id = id;\n        this.username = username;\n        this.password = password;\n        this.email = email;\n        this.fullName = fullName;\n        this.role = role;\n        this.createdAt = new Date(); // Set to current date by default\n    }\n\n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getUsername() {\n        return username;\n    }\n\n    public void setUsername(String username) {\n        this.username = username;\n    }\n...\nPath: src/main/java/model/OrderItem.java\npackage model;\n\nimport java.math.BigDecimal;\n\npublic class OrderItem {\n    private int id;\n    private int orderId;\n    private int bookId;\n    private int quantity;\n    private BigDecimal price;\n    private Book book;\n    \n    public OrderItem() {\n    }\n    \n    public OrderItem(int id, int orderId, int bookId, int quantity, BigDecimal price) {\n        this.id = id;\n        this.orderId = orderId;\n        this.bookId = bookId;\n        this.quantity = quantity;\n        this.price = price;\n    }\n    \n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public int getOrderId() {\n        return orderId;\n    }\n    \n    public void setOrderId(int orderId) {\n        this.orderId = orderId;\n    }\n    \n    public int getBookId() {\n        return bookId;\n    }\n    \n    public void setBookId(int bookId) {\n        this.bookId = bookId;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n    \n    public BigDecimal getPrice() {\n        return price;\n    }\n    \n    public void setPrice(BigDecimal price) {\n        this.price = price;\n    }\n    \n    public Book getBook() {\n        return book;\n    }\n    \n    public void setBook(Book book) {\n        this.book = book;\n    }\n    \n    public BigDecimal getSubtotal() {\n        return price.multiply(new BigDecimal(quantity));\n    }\n}\n...\nPath: src/main/java/model/Book.java\n...\n\npublic class Book {\n    private int id;\n    private String title;\n    private String author;\n    private String description;\n    private String category;\n    private String genre;\n    private BigDecimal price;\n    private String imageUrl;\n    private int stock;\n    \n    public Book() {\n    }\n    \n    public Book(int id, String title, String author, String description, String category, \n                String genre, BigDecimal price, String imageUrl, int stock) {\n        this.id = id;\n        this.title = title;\n        this.author = author;\n        this.description = description;\n        this.category = category;\n        this.genre = genre;\n        this.price = price;\n        this.imageUrl = imageUrl;\n        this.stock = stock;\n    }\n    \n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public String getTitle() {\n        return title;\n    }\n...\nPath: src/main/java/model/Order.java\npackage model;\n\nimport java.math.BigDecimal;\nimport java.util.Date;\nimport java.util.List;\n\npublic class Order {\n    private int id;\n    private int userId;\n    private Date orderDate;\n    private BigDecimal totalAmount;\n    private String status; // \"pending\", \"processing\", \"shipped\", \"delivered\", \"cancelled\"\n    private List<OrderItem> orderItems;\n    \n    public Order() {\n    }\n    \n    public Order(int id, int userId, Date orderDate, BigDecimal totalAmount, String status) {\n        this.id = id;\n        this.userId = userId;\n        this.orderDate = orderDate;\n        this.totalAmount = totalAmount;\n        this.status = status;\n    }\n    \n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public int getUserId() {\n        return userId;\n    }\n    \n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n    \n    public Date getOrderDate() {\n        return orderDate;\n    }\n...\nPath: src/main/java/dao/UserDAO.java\npackage dao;\n\nimport model.User;\nimport java.sql.DriverManager;\nimport util.PasswordUtil;\n\nimport java.sql.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class UserDAO {\n\n    static {\n        try {\n            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Database connection parameters\n    private static final String JDBC_URL = \"jdbc:mysql://localhost:3306/ebookjava\";\n    private static final String JDBC_USER = \"root\";\n    private static final String JDBC_PASSWORD = \"oracle\";\n...\nPath: src/main/java/model/CartItem.java\n...\n\npublic class CartItem {\n    private int id;\n    private int userId;\n    private int bookId;\n    private int quantity;\n    private Book book;\n    \n    public CartItem() {\n    }\n    \n    public CartItem(int id, int userId, int bookId, int quantity) {\n        this.id = id;\n        this.userId = userId;\n        this.bookId = bookId;\n        this.quantity = quantity;\n    }\n    \n    // Getters and Setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public int getUserId() {\n        return userId;\n    }\n    \n    public void setUserId(int userId) {\n        this.userId = userId;\n    }\n    \n    public int getBookId() {\n        return bookId;\n    }\n    \n    public void setBookId(int bookId) {\n        this.bookId = bookId;\n    }\n    \n    public int getQuantity() {\n        return quantity;\n    }\n    \n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n    \n    public Book getBook() {\n        return book;\n    }\n...\nPath: src/main/java/model/Payment.java\n...\n\npublic class Payment {\n    private int id;\n    private int orderId;\n    private String paymentMethod;\n    private String cardNumber;\n    private String cardHolderName;\n    private String expiryDate;\n    private String cvv;\n    private BigDecimal amount;\n    private String status;\n    private String transactionId;\n    private Date paymentDate;\n    \n    // Constructors\n    public Payment() {\n    }\n    \n    // Getters and setters\n    public int getId() {\n        return id;\n    }\n    \n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public int getOrderId() {\n        return orderId;\n    }\n    \n    public void setOrderId(int orderId) {\n        this.orderId = orderId;\n    }\n    \n    public String getPaymentMethod() {\n        return paymentMethod;\n    }\n    \n    public void setPaymentMethod(String paymentMethod) {\n        this.paymentMethod = paymentMethod;\n    }\n    \n    public String getCardNumber() {\n        return cardNumber;\n    }\n...\nPath: src/main/java/util/CreateAdminUser.java\npackage util;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class CreateAdminUser {\n    public static void main(String[] args) {\n        Connection conn = null;\n        PreparedStatement checkStmt = null;\n        PreparedStatement insertStmt = null;\n        ResultSet rs = null;\n\n        try {\n            conn = DatabaseUtil.getConnection();\n\n            // Check if admin user already exists\n            String checkSql = \"SELECT COUNT(*) FROM users WHERE username...","isError":false,"requestId":""}}},"draftExchange":{"request_message":"","rich_text_json_repr":{"type":"doc","content":[{"type":"paragraph"}]},"mentioned_items":[],"status":"draft"},"requestIds":[],"isPinned":false,"isShareable":true,"extraData":{"isAgentConversation":true,"hasDirtyEdits":false},"personaType":0}},"agentExecutionMode":"manual","isAgentEditsCollapsed":true}" />
      </map>
    </option>
  </component>
</project>